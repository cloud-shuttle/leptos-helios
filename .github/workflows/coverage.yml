name: Test Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run coverage daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  coverage:
    name: Test Coverage Report
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy, llvm-tools-preview

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Run tests with coverage
      run: |
        cargo tarpaulin \
          --workspace \
          --all-features \
          --out Html \
          --out Xml \
          --out Stdout \
          --output-dir ./coverage \
          --exclude-files '*/tests/*' \
          --exclude-files '*/examples/*' \
          --exclude-files '*/benches/*' \
          --exclude-files '*/src/bin/*' \
          --timeout 120 \
          --verbose

    - name: Generate coverage summary
      run: |
        echo "## 📊 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage by Crate" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Crate | Lines | Coverage |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|-------|----------|" >> $GITHUB_STEP_SUMMARY
        
        # Parse coverage results and add to summary
        if [ -f ./coverage/cobertura.xml ]; then
          echo "✅ Coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Coverage files:**" >> $GITHUB_STEP_SUMMARY
          echo "- HTML Report: \`./coverage/tarpaulin-report.html\`" >> $GITHUB_STEP_SUMMARY
          echo "- XML Report: \`./coverage/cobertura.xml\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Coverage report generation failed" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: ./coverage/
        retention-days: 30

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            // Read coverage summary if available
            const coveragePath = './coverage/cobertura.xml';
            if (fs.existsSync(coveragePath)) {
              const coverage = fs.readFileSync(coveragePath, 'utf8');
              
              // Extract coverage percentage (simplified parsing)
              const lineRateMatch = coverage.match(/line-rate="([^"]+)"/);
              const coveragePercent = lineRateMatch ? (parseFloat(lineRateMatch[1]) * 100).toFixed(2) : 'N/A';
              
              const comment = `## 📊 Test Coverage Report
              
              **Overall Coverage:** ${coveragePercent}%
              
              📁 **Coverage Artifacts:**
              - HTML Report: Available in workflow artifacts
              - XML Report: Available in workflow artifacts
              
              ✅ All tests passed with coverage measurement complete.`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not create coverage comment:', error);
          }

  coverage-quality-gate:
    name: Coverage Quality Gate
    runs-on: ubuntu-latest
    needs: coverage
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download coverage artifacts
      uses: actions/download-artifact@v3
      with:
        name: coverage-report
        path: ./coverage/

    - name: Check coverage thresholds
      run: |
        echo "## 🎯 Coverage Quality Gate" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Define coverage thresholds
        MIN_COVERAGE=70
        TARGET_COVERAGE=80
        
        if [ -f ./coverage/cobertura.xml ]; then
          # Extract coverage percentage
          COVERAGE=$(grep -o 'line-rate="[^"]*"' ./coverage/cobertura.xml | grep -o '[0-9.]*' | head -1)
          COVERAGE_PERCENT=$(echo "$COVERAGE * 100" | bc -l | cut -d. -f1)
          
          echo "**Current Coverage:** ${COVERAGE_PERCENT}%" >> $GITHUB_STEP_SUMMARY
          echo "**Minimum Required:** ${MIN_COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          echo "**Target Coverage:** ${TARGET_COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$COVERAGE_PERCENT" -ge "$MIN_COVERAGE" ]; then
            echo "✅ **PASSED:** Coverage meets minimum threshold" >> $GITHUB_STEP_SUMMARY
            if [ "$COVERAGE_PERCENT" -ge "$TARGET_COVERAGE" ]; then
              echo "🎉 **EXCELLENT:** Coverage exceeds target threshold" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **FAILED:** Coverage below minimum threshold" >> $GITHUB_STEP_SUMMARY
            echo "Please add more tests to improve coverage." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
        else
          echo "❌ **ERROR:** Coverage report not found" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

  coverage-trend:
    name: Coverage Trend Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate coverage trend
      run: |
        echo "## 📈 Coverage Trend Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Generate current coverage
        cargo tarpaulin --workspace --all-features --out Stdout --timeout 120 > current_coverage.txt
        
        # Extract current coverage percentage
        CURRENT_COVERAGE=$(grep -o '[0-9.]*%' current_coverage.txt | head -1 | sed 's/%//')
        
        echo "**Current Coverage:** ${CURRENT_COVERAGE}%" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Store coverage data for trend analysis
        echo "{\"date\":\"$(date -u +%Y-%m-%d)\",\"coverage\":${CURRENT_COVERAGE}}" >> coverage_history.json
        
        # Create simple trend visualization
        echo "### Coverage History" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Recent Coverage:**" >> $GITHUB_STEP_SUMMARY
        echo "- $(date -u +%Y-%m-%d): ${CURRENT_COVERAGE}%" >> $GITHUB_STEP_SUMMARY
        
        # Clean up
        rm -f current_coverage.txt
