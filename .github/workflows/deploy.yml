name: Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: '0.1.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  deploy-crates-io:
    name: Deploy to crates.io
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Build project
      run: cargo build --release
      
    - name: Run tests
      run: cargo test --release
      
    - name: Publish to crates.io
      run: |
        cd helios-core
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        
    - name: Publish leptos-helios-components
      run: |
        cd helios-leptos
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        
    - name: Publish leptos-helios-macros
      run: |
        cd helios-macros
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        
    - name: Publish leptos-helios-wasm
      run: |
        cd helios-wasm
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        
    - name: Publish leptos-helios-wasm-core
      run: |
        cd helios-wasm-core
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        
  deploy-npm:
    name: Deploy to NPM
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
        
    - name: Install wasm-pack
      uses: jetli/wasm-pack-action@v0.3.0
      with:
        version: '0.12.1'
        
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Build WASM packages
      run: |
        cd helios-wasm-core
        wasm-pack build --target nodejs --out-dir pkg
        
    - name: Publish to NPM
      run: |
        cd helios-wasm-core/pkg
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
  deploy-github-releases:
    name: Deploy to GitHub Releases
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
        
    - name: Install wasm-pack
      uses: jetli/wasm-pack-action@v0.3.0
      with:
        version: '0.12.1'
        
    - name: Build release artifacts
      run: |
        cargo build --release
        cd helios-wasm-core
        wasm-pack build --target web --out-dir pkg
        
    - name: Create release archive
      run: |
        tar -czf helios-release.tar.gz \
          target/release/ \
          helios-wasm-core/pkg/ \
          docs/ \
          examples/ \
          README.md \
          LICENSE
          
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Helios v${{ github.ref_name }}
          
          ### Features
          - WebGPU-accelerated rendering
          - Advanced chart types (Radar, Sankey, Treemap, Violin)
          - High-performance optimization (SIMD, LOD, Memory Pooling)
          - Comprehensive documentation and examples
          
          ### Downloads
          - Source code: `helios-release.tar.gz`
          - WASM package: `helios-wasm-core/pkg/`
          
          ### Installation
          ```toml
          [dependencies]
          leptos-helios = "${{ github.ref_name }}"
          ```
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./helios-release.tar.gz
        asset_name: helios-release.tar.gz
        asset_content_type: application/gzip