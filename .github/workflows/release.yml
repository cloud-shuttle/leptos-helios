name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        draft: true
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        target: [x86_64-unknown-linux-gnu, x86_64-pc-windows-msvc, x86_64-apple-darwin]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-stable-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.os }}-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/
        retention-days: 90

  build-wasm:
    name: Build WASM
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        targets: wasm32-unknown-unknown

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-stable-wasm-${{ hashFiles('**/Cargo.lock') }}

    - name: Install wasm-pack
      run: |
        curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Install trunk
      run: cargo install trunk

    - name: Install binaryen
      run: |
        sudo apt-get update
        sudo apt-get install -y binaryen

    - name: Build WASM
      run: |
        wasm-pack build --target web --out-dir pkg --release --no-typescript --no-pack

    - name: Optimize WASM
      run: |
        wasm-opt -O4 --enable-simd --enable-threads --enable-bulk-memory \
          --enable-mutable-globals --enable-nontrapping-float-to-int \
          --enable-sign-ext --enable-saturating-float-to-int \
          --enable-tail-call --strip-debug --strip-producers \
          pkg/helios_bg.wasm -o pkg/helios_optimized.wasm
        mv pkg/helios_optimized.wasm pkg/helios_bg.wasm

    - name: Build with Trunk
      run: |
        trunk build --release

    - name: Upload WASM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wasm-release
        path: |
          pkg/
          dist/
        retention-days: 90

  publish-crates:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}

    - name: Publish to Crates.io
      run: |
        cargo publish --workspace --all-features
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [create-release, build-wasm]
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        targets: wasm32-unknown-unknown

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-stable-wasm-${{ hashFiles('**/Cargo.lock') }}

    - name: Install wasm-pack
      run: |
        curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Build WASM for NPM
      run: |
        wasm-pack build --target nodejs --out-dir pkg-npm --release --scope @helios-rs

    - name: Publish to NPM
      run: |
        cd pkg-npm
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  finalize-release:
    name: Finalize Release
    runs-on: ubuntu-latest
    needs: [create-release, build-release, build-wasm, publish-crates, publish-npm]
    if: always() && (needs.publish-crates.result == 'success' || needs.publish-npm.result == 'success')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Finalize Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.create-release.outputs.version }}
        name: Release ${{ needs.create-release.outputs.version }}
        draft: false
        prerelease: false
        files: |
          artifacts/**/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [create-release, finalize-release]
    if: always()

    steps:
    - name: Notify on Success
      if: needs.finalize-release.result == 'success'
      run: |
        echo "Release ${{ needs.create-release.outputs.version }} published successfully!"

    - name: Notify on Failure
      if: needs.finalize-release.result == 'failure'
      run: |
        echo "Release ${{ needs.create-release.outputs.version }} failed!"
        exit 1
