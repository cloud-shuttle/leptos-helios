name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust-version: [stable, beta, nightly]
        include:
          - os: ubuntu-latest
            rust-version: stable
            target: wasm32-unknown-unknown
          - os: ubuntu-latest
            rust-version: stable
            target: x86_64-unknown-linux-gnu

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust-version }}
        targets: ${{ matrix.target }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust-version }}-
          ${{ runner.os }}-cargo-

    - name: Install wasm-pack
      if: matrix.target == 'wasm32-unknown-unknown'
      run: |
        curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Install trunk
      if: matrix.target == 'wasm32-unknown-unknown'
      run: cargo install trunk

    - name: Install binaryen (wasm-opt)
      if: matrix.target == 'wasm32-unknown-unknown' && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y binaryen

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run cargo check
      run: cargo check --all-targets --all-features

    - name: Run tests
      run: cargo test --all-targets --all-features

    - name: Run WASM tests
      if: matrix.target == 'wasm32-unknown-unknown'
      run: |
        wasm-pack test --headless --firefox
        wasm-pack test --headless --chrome

    - name: Build WASM
      if: matrix.target == 'wasm32-unknown-unknown'
      run: |
        wasm-pack build --target web --out-dir pkg --release --no-typescript --no-pack

    - name: Build with Trunk
      if: matrix.target == 'wasm32-unknown-unknown'
      run: |
        trunk build --release

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.rust-version }}
        path: |
          target/debug/deps/*.gcov
          target/llvm-cov-target

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        targets: wasm32-unknown-unknown
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}

    - name: Install wasm-pack
      run: |
        curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Install trunk
      run: cargo install trunk

    - name: Install binaryen
      run: |
        sudo apt-get update
        sudo apt-get install -y binaryen

    - name: Build WASM
      run: |
        wasm-pack build --target web --out-dir pkg --release --no-typescript --no-pack

    - name: Optimize WASM
      run: |
        wasm-opt -O4 --enable-simd --enable-threads --enable-bulk-memory \
          --enable-mutable-globals --enable-nontrapping-float-to-int \
          --enable-sign-ext --enable-saturating-float-to-int \
          --enable-tail-call --strip-debug --strip-producers \
          pkg/helios_bg.wasm -o pkg/helios_optimized.wasm
        mv pkg/helios_optimized.wasm pkg/helios_bg.wasm

    - name: Build with Trunk
      run: |
        trunk build --release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          pkg/
        retention-days: 30

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: |
        cargo bench --all-targets --all-features

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: target/criterion/
        retention-days: 30

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}

    - name: Generate coverage report
      run: |
        cargo llvm-cov --all-targets --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
